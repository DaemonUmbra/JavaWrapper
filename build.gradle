buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'commons-io:commons-io:2.5'
	}
}

plugins {
	id 'org.echocat.golang' version '0.1.13'
}

version = project.version
golang {
	platforms = System.getProperty("platforms", project.platforms)

        packageName = project.grp

	dependencies {
		build 'github.com/fatih/color'
		build 'github.com/ulikunitz/xz/lzma'
		build 'github.com/kardianos/osext'

		//Hack to fix the build
		deleteAllCachedDependenciesOnClean = true

	}

	build {

		excludes = [
			'.git/**',
			'build.gradle',
			'build/**',
			'.gradle/**',
			'gradle/**'
		]

		useTemporaryGopath = true
		//Manully change the output directory it will out b
		outputFilenamePattern = '../out/' + project.binname + '-v' + project.version + '-%{platform}%{extension}'
	}

}

task pkgWin(type: Zip, dependsOn: ["build"]) {
	from("${buildDir}/out/")
	include "*.exe"
	archiveName "windows-v${project.version}.zip"
	destinationDir file("${buildDir}/pkg")
}

task pkgLinux(type: Tar, dependsOn: ["build"]) {
	from("${buildDir}/out/")
	include "${project.binname}-v${project.version}-linux-386"
	archiveName "Linux-v${project.version}.tar.gz"
	compression = Compression.GZIP	
	destinationDir file("${buildDir}/pkg")
}



task pkgOsx(type: Tar, dependsOn: ["build"]) {
	from("${buildDir}/out/")
	include "${project.binname}-v${project.version}-darwin-amd64"
	archiveName "Osx-v${project.version}.tar.gz"
	compression = Compression.GZIP	
	destinationDir file("${buildDir}/pkg")
}


task wrapper(type: Wrapper) {
	gradleVersion = '3.3'
}

task prepGJW(type: Copy) {
	mkdir("${buildDir}/gjw/")	
	from "${buildDir}/out/"
	into "${buildDir}/gjw"
}

//Create generic wrapper
task makeGJW(dependsOn: ["prepGJW"] ) {

	def jr = file("forge-1.11-13.19.1.2199-installer.jar");
	def li = file("build/gjw/${project.binname}-v${project.version}-linux-386");

	println jr.exists()
	println li.exists()
	appendbin(jr, li)

}


import org.apache.commons.io.IOUtils
import java.io.FileOutputStream
import java.io.FileInputStream
import java.io.FileNotFoundException
import java.io.IOException
void appendbin(File infile, File outfile)
{
	println "InFile: "  + infile.getName() + " Path: " + infile.getCanonicalPath()
	println "OutFile: " + outfile.getName() +" Path: " + outfile.getCanonicalPath()

	try {
		FileInputStream fis = new FileInputStream(infile);
		FileOutputStream out = new FileOutputStream(outfile, true);
		out.write(IOUtils.toByteArray(fis));
		out.close();

	} catch (FileNotFoundException e) {
		e.printStackTrace();
	} catch (IOException e) {
		e.printStackTrace();
	}

}
