plugins {
	id 'org.echocat.golang' version '0.1.13'
}

version = project.version
group 'github.com/MinecraftForge/JavaWrapper'
golang {
	platforms = System.getProperty("platforms", project.platforms)

	// packageName = project.name
	dependencies {
		build 'github.com/fatih/color'
		build 'github.com/ulikunitz/xz/lzma'
		build 'github.com/kardianos/osext'

	//Hack to fix the build
	deleteAllCachedDependenciesOnClean = true
	}

	build {
		excludes = [
			'.git/**',
			'build.gradle',
			'build/**',
			'.gradle/**',
			'gradle/**'
		]

	useTemporaryGopath = true
	//Manully change the output directory it will out b
	outputFilenamePattern = "$buildDir/out/$project.binname-v$project.version-%{platform}%{extension}"
	}
}

def baseInclude = "${project.binname}-v${project.version}"
task pkgWindows(type: Zip) {
	dependsOn baseBuild
	baseName = "$project.binname-Win-$project.version"
	version = project.version
	destinationDir file("${buildDir}/pkg")
	from "$buildDir/out/"
	include '*.exe'
}

task pkgOsx(type: Tar) {
	 dependsOn baseBuild
	 baseName = "$project.binname-Osx-$project.version"
	 version = project.version
	 extension = 'tar.gz'
	 destinationDir file("${buildDir}/pkg")
	 compression = Compression.GZIP
	 from "$buildDir/out/"
	 include "$baseInclude-darwin-amd64"
}

task pkgLinux(type: Tar) {
	 dependsOn baseBuild
	 baseName = "$project.binname-Linux-$project.version"
	 version = project.version
	 extension = 'tar.gz'
	 destinationDir file("${buildDir}/pkg")
	 compression = Compression.GZIP
	 from "$buildDir/out/"
	 include "$baseInclude-linux-386"
}

task pkg() {
	dependsOn pkgLinux, pkgOsx, pkgWindows
	description 'Creates package for each platform'
}

task wrapper(type: Wrapper) {
	gradleVersion = '3.3'
}
