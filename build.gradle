
plugins {
	id 'org.echocat.golang' version '0.1.14'
	id "de.undercouch.download" version "3.2.0"
	id 'maven-publish'
}

version = project.version
group 'github.com/MinecraftForge/JavaWrapper'

golang {
	platforms = System.getProperty("platforms", project.platforms)

	// packageName = project.name
	dependencies {
		build 'github.com/fatih/color'
		build 'github.com/ulikunitz/xz/lzma'
		build 'github.com/kardianos/osext'

	//Hack to fix the build
	deleteAllCachedDependenciesOnClean = true
	}

	build {
		excludes = [
			'.git/**',
			'build.gradle',
			'build/**',
			'.gradle/**',
			'gradle/**'
		]

	useTemporaryGopath = true
	//Manully change the output directory
	outputFilenamePattern = "$buildDir/out/$project.binname-v$project.version-%{platform}%{extension}"
	}
}

task renameBin(type: Copy) {
	dependsOn baseBuild
	from("$buildDir/out/")
	into("$buildDir/out/")
	rename("$project.binname-v$project.version-windows-386.exe", "$project.binname-v$project.version-win.exe")
	rename("$project.binname-v$project.version-linux-386", "$project.binname-v$project.version-linux")
	rename("$project.binname-v$project.version-darwin-amd64", "$project.binname-v$project.version-osx")

}

def baseInclude = "${project.binname}-v${project.version}"



//Using this because fuck the golang plugin
import de.undercouch.gradle.tasks.download.Download
task getUpx() {
	download {
		src([
				"http://files.minecraftforge.net/maven/manage/upload/net/minecraftforge/repkg/upx/3.93-forge/upx-3.93-forge-linux.tar.gz",
				"http://files.minecraftforge.net/maven/manage/upload/net/minecraftforge/repkg/upx/3.93-forge/upx-3.93-forge-osx.tar.gz",
				"http://files.minecraftforge.net/maven/manage/upload/net/minecraftforge/repkg/upx/3.93-forge/upx-3.93-forge-win.tar.gz"
		])
		dest new File("$buildDir/upx")
	}
	copy {
		from tarTree("$buildDir/upx/upx-3.93-forge-linux.tar.gz")
		fileMode=0755
		into "$buildDir/upx"

		from tarTree("$buildDir/upx/upx-3.93-forge-win.tar.gz")
		fileMode=0755
		into "$buildDir/upx"

		from tarTree("$buildDir/upx/upx-3.93-forge-osx.tar.gz")
		fileMode=0755
		into "$buildDir/upx"
	}
}


import org.apache.tools.ant.taskdefs.condition.Os

task shrinkWrapper {
	dependsOn renameBin, getUpx

	ext.Shrink = { target ->
		exec {
			if (Os.isFamily(Os.FAMILY_UNIX)) {
				commandLine './build/upx/upx-linux/upx-linux', target
			} else if (Os.isFamily(Os.FAMILY_MAC)) {
				commandLine './build/upx/upx-osx/upx-osx', target
			} else if (Os.isFamily(Os.FAMILY_WINDOWS)) {
				commandLine 'build/upx/upx-win/upx-win.exe', target
			}
		}
	}
	doLast {
		Shrink("$buildDir/out/$baseInclude-osx")
		Shrink("$buildDir/out/$baseInclude-linux")
		Shrink("$buildDir/out/$baseInclude-win.exe")
	}
}

task createAppDir {
	dependsOn shrinkWrapper
	doLast {
		def appDir = new File("$buildDir/pkg/app-${project.version}/$baseInclude-osxapp/Contents/MacOs")
		if (!appDir.exists()) {
			appDir.mkdirs()
		}

		copy {
			from "$buildDir/out/$baseInclude-osx"
			into "$buildDir/pkg/app-${project.version}/$baseInclude-osxapp/Contents/MacOs/"
		}

		String contents = new File("Info.plist").getText('UTF-8')
		contents = contents.replaceAll("@NAME@", project.binname).replaceAll("@VERSION@", project.version).replaceAll("@EXE@", "$baseInclude-osx")
		new File("$buildDir/pkg/app-${project.version}/$baseInclude-osxapp/Contents/Info.plist").write(contents, 'UTF-8')

	}


}

task pkgWindows(type: Zip) {
	dependsOn shrinkWrapper
	baseName = "$project.binname"
	classifier = "win"
	version = project.version
	destinationDir file("${buildDir}/pkg")
	from "$buildDir/out/"
	include "$baseInclude-win.exe"
}

task pkgMinOsx(type: Tar) {
	dependsOn shrinkWrapper
	baseName = "$project.binname"
	classifier = "minosx"
	version = project.version
	extension = 'tar.gz'
	destinationDir file("${buildDir}/pkg")
	compression = Compression.GZIP
	from "$buildDir/out/"
	include "$baseInclude-osx"
}

task pkgOsxApp(type: Tar) {
	dependsOn createAppDir
	baseName = "$project.binname"
	classifier = 'osxapp'
	version = project.version
	extension = 'tar.gz'
	destinationDir file("${buildDir}/pkg")
	compression = Compression.GZIP
	from ("$buildDir/pkg/app-${project.version}")
}

task pkgLinux(type: Tar) {
	dependsOn shrinkWrapper
	baseName = "$project.binname"
	classifier = 'linux'
	version = project.version
	extension = 'tar.gz'
	destinationDir file("${buildDir}/pkg")
	compression = Compression.GZIP
	from "$buildDir/out/"
	include "$baseInclude-linux"
}

task pkg() {
	dependsOn pkgLinux, pkgMinOsx, pkgOsxApp, pkgWindows
	description 'Creates package for each platform'
}

task wrapper(type: Wrapper) {
	gradleVersion = '3.3'
}

publishing {
	repositories {
		maven {
			name  'Forge Maven'
			credentials {
				username 'forge'
				password "$project.forgeMvnPass"

			}
			url "http://files.minecraftforge.net/maven/manage/upload"
		}
	}
	publications {
		maven(MavenPublication) {
			groupId 'net.minecraftforge.javawrapper'
			artifactId 'javawrapper'
			artifact(pkgWindows)
			artifact(pkgMinOsx)
			artifact(pkgOsxApp)
			artifact(pkgLinux)
		}
	}
}

